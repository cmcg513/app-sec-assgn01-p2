Exploit for kellender's sandbox (turingComplete.c)

Assignment 1, Part 2 
Application Security CS-GY 4753 
Prof. Justin Cappos

README Author: Casey McGinley

Here I had some problems getting the code to run as described in the readme. I found that the makefile did not seem to work properly, neither on Ubuntu 12.X nor OSX, so I used gcc manually in Ubuntu to test against this code. With the compiled code, I tried to run the provided samples (powerOf2.c, first10Fib.c) inside the sandbox. The code executed without errors, however the sandbox did not seem to output the output from the the code running inside it. Running the examples alone worked fine, but they produced no output with the sandbox. I have a feeling this has something to do with how the author uses execve(), but with limited time I couldn't pinpoint it exactly.

So, since I couldn't get the sandbox itself to work I unfortunately could not come up with a working exploit. I did however, come up with a small C program that I believe would break out of the snadbox if teh sandbox worked as intended by the author.

The sandbox does not attempt to blacklist or whitelist any specific keywords or functions. As far as I can tell, any and all include statements would be completely valid for a given input program. The author utilizes fork() so that only child processes execute the input program. The comments indicate the author does this so that the executed program is run in a separate address space fromt eh parent process, but I don't know that this achieves as much isolation as intended. The author also uses the resource library to limit virtual address space as well as the max file size (this is set to zero to prevent files from being created at all).

Given that nothing seems to bar include statements, my would-be exploit simply alter's the max file size again so that files now CAN be made. Now I can use fopen/fprintf to read and alter files to my heart's content. 

Relevant file:
kellender_attack.c

